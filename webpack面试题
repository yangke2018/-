参考资料：
https://www.jianshu.com/p/e80d38661358
https://www.jianshu.com/p/64dfb0d4197d

1. webpack3和webpack4的区别
    1.1. mode/–mode参数  
    新增了mode/--mode参数来表示是开发还是生产（development/production）
    
    1.2. 移除loaders，必须使用rules
    
    1.3. 移除了CommonsChunkPlugin (提取公共代码)，用optimization.splitChunks和optimization.runtimeChunk来代替
    
    1.4. 支持es6的方式导入JSON文件，并且可以过滤无用的代码
    
    1.5. 升级happypack插件（happypack可以进行多线程加速打包）
    
    1.6. ExtractTextWebpackPlugin调整，建议选用新的CSS文件提取kiii插件mini-css-extract-plugin，production模式，增加 minimizer
    
    
2. loader 和 plugin 不同
    2.1. loader是使wenbpack拥有加载和解析非js文件的能力
    2.2. plugin 可以扩展webpack的功能，使得webpack更加灵活。可以在构建的过程中通过webpack的api改变输出的结果
    
   
3. webpack构建流程
    3.1. 初始化参数
    3.2. 开始编译
    3.3. 确定入口
    3.4. 编译模块
    3.5. 完成模块编译
    3.6. 输出资源
    3.7. 输出完成
    
4. webpack 热加载执行原理


5. 如何利用webpack来优化前端性能
    5.1. 压缩代码。uglifyJsPlugin 压缩js代码， mini-css-extract-plugin 压缩css代码
    5.2. 利用CDN加速，将引用的静态资源修改为CDN上对应的路径，可以利用webpack对于output参数和loader的publicpath参数来修改资源路径
    5.3. 删除死代码（tree shaking），css需要使用Purify-CSS
    5.4. 提取公共代码。webpack4移除了CommonsChunkPlugin (提取公共代码)，用optimization.splitChunks和optimization.runtimeChunk来代替
    
 
6. 什么是bundle,什么是chunk，什么是module?
    bundle:有webpack打包出来的文件
    chunk：webpack在进行模块的依赖分析的时候，代码分割出来的代码块
    module:开发中的单个模块
    
7. webpack-dev-server和http服务器如nginx有什么区别?
    webpack-dev-server使用内存来存储webpack开发环境下的打包文件，并且可以使用模块热更新，他比传统的http服务对开发更加简单高效。
    
8. DefinePlugin
    DefinePlugin ：允许创建一个在编译时可以配置的全局变量
    
9. DllPlugin
    使用DllPlugin可以减少基础模块编译次数，动态链接库插件，其原理是吧网页依赖的基础模块抽离出来打包到dll文件中，当需要导入的模块存在于某个dll中时，这个模块不再被打包，而是去dll中获取。在dll中大多包含的时常用的第三方模块，只要这些模块版本不升级，就只需要被编译一次。
    注意
    DllPlugin参数中的name必须要和output.library值保持一致，并且生成的mainfest文件中会引用output.library值
    
 
10. happyPack开启多线程loader转换
运行在node.js之上的webpack时单线程模型，也就是只能一个一个文件进行处理，不能并行处理，happypack可以将任务分解给多个子进程，最后将结果发给主进程，js是单线程模型，只能通过这种多线程的方式提高性能
    

11. 常用 loader 和 plugin 作用汇总简介
    css-loader：主要用于处理图片路径（包括导入 css 文件的路径），并且会将 css 样式打包进 js 文件中（以模块的形式打包导入）。
    
    style-loader:通过 <style> 标签将 css 插入到 DOM 中。建议 style-loader 与 css-loader 结合使用。
    
    postcss-loader:我们编写 css 时为了兼容不同浏览器会加上前缀比如 -webkit 等。postcss 会帮我们自动加上前缀，不用一个一个的手动添加。
    
    sass-loader:加载 sass/scss 文件并且变异成 css。
    
    vue-loader: 是一个 webpack 的 loader，它允许你以一种名为单文件组件 (SFCs)的格式撰写 Vue 组件。
    Vue Loader 的配置和其它的 loader 不太一样。除了通过一条规则将 vue-loader 应用到所有扩展名为 .vue 的文件上之外，请确保在你的 webpack 配置中添加 Vue Loader 的插件：
    
    vue-style-loader:vue-style-loader 是基于 style-loader 的，与 style-loader 相似，你可以链式的加在 css-loader 后面，通过 <style> 标签动态的将 css 注入到 document 中。因为它会作为一个内置的依赖被vue-loader 使用，所以通常你不需要自己手动的配置它。
    
    eslint-loader:让 webpack 支持 eslint。
    
    svg-sprite-loader:创建 SVG 雪碧图。
    
    file-loader:如果我们希望在页面引入图片（包括img的src和background的url）。当我们基于webpack进行开发时，引入图片会遇到一些问题。
    
    url-loader:将 文件转换成 base64 URI。
    

    
    
    
    
    mini-css-extract-plugin:mini-css-extract-plugin:将 css 提取为独立的文件，对每个包含 css 的js文件都会创建一个 css 文件。支持按需加载 css 和 sourceMap。暂不支持 HMR。

    node-notifier:是 node 模块，用 node.js 发送跨平台（包括 maxOS、Windows、Linux）的原生的通知。
    
    uglify-webpack-plugin:压缩 javascript
    
    optimize-css-assets-webpack-plugin：用于优化压缩 css 资源
    
    clean-webpack-plugin：在每次构建前清理 /dist 文件夹，是比较推荐的做法，因此只会生成用到的文件。
    
    babel-polyfill:
    
    **webpack.ProvidePlugin: **自动加载模块，而不必到处 import 和 require。
    
    copy-webpack-plugin：把我们自己建的文件或是整个目录复制到打包目录下。
    
    webpack-bundle-analyzer：会给你打包后的 bundles 创建一个可交互的 树形映射图，来查看究竟打包了写什么，哪些体积比较大等，便于优化。像这样。
    
    




